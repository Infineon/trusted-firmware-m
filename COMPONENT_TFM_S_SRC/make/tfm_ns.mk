################################################################################
# \file tfm_ns.mk
# \version 1.0
#
# \brief
# Trusted Firmware-M (TF-M) non-secure image make file
#
################################################################################
# \copyright
# Copyright (c) 2022 Cypress Semiconductor Corporation (an Infineon company)
# or an affiliate of Cypress Semiconductor Corporation. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

ifeq ($(WHICHFILE),true)
$(info Processing $(lastword $(MAKEFILE_LIST)))
endif

# Directory with current makefile
TFM_MAKE_SRC_DIR:=$(realpath $(join $(dir $(lastword $(MAKEFILE_LIST))),..))

# Makefile with common macros
include $(join $(dir $(lastword $(MAKEFILE_LIST))),common.mk)

################################################################################
# Settings - allows to configure build behaviour
################################################################################

# Path to TF-M non-secure interface
TFM_S_APP_INSTALL_PATH?=$(TFM_S_APP_PATH)/build/$(TARGET)/$(CONFIG)/install

# Disable TF-M prebuilt image
DISABLE_COMPONENTS+=TFM_S_FW TFM_NS_INTERFACE

# Add non-secure interface generated by TF-M Secure Application to MTB autodiscovery
SEARCH+=$(TFM_S_APP_INSTALL_PATH)/interface
SEARCH+=$(TFM_S_APP_INSTALL_PATH)/memory_layout

# Path to TF-M secure image
POST_BUILD_CM0_LIB_PATH?=$(TFM_S_APP_INSTALL_PATH)/outputs/CYPRESS/PSOC64

ifndef TFM_BUILD_DIR
APP_DIR=$(dir $(firstword $(MAKEFILE_LIST)))
ifeq ($(APP_DIR),)
APP_DIR=$(CURDIR)
endif
TFM_BUILD_DIR=$(call TFM_PATH_MIXED,$(APP_DIR)/build/$(TARGET)/$(CONFIG))
endif

################################################################################
# Extract data from TF-M secure build 
################################################################################

# Extract targets which triggers build
IS_BUILD_TARGET=$(findstring all,$(MAKECMDGOALS))$(findstring build,$(MAKECMDGOALS))

# Validate presence of $(TFM_S_APP_INSTALL_PATH)   
ifneq ($(IS_BUILD_TARGET),)
ifeq ($(wildcard $(TFM_S_APP_INSTALL_PATH)),)
$(error "\"$(TFM_S_APP_INSTALL_PATH)\" is not found, please validate path and/or build TF-M secure application")
endif
endif

# Load defines generated during build of secure image.
# This file should contain TFM_PLATFORM_NS_DEFS macro.
TFM_NS_DEFS_PATH?=$(TFM_S_APP_PATH)/build/$(TARGET)/$(CONFIG)/defines_ns.mk
ifneq ($(wildcard $(TFM_NS_DEFS_PATH)),)
# include and extract defines generated by build 
include $(TFM_NS_DEFS_PATH)
DEFINES+=$(subst "" ,,$(TFM_PLATFORM_NS_DEFS))
endif


################################################################################
# Generate linker script
################################################################################

ifeq ($(IS_BUILD_TARGET),)
# This is not a build target, skip fixing linker script
else ifneq ($(flavor TFM_LINKER_SCRIPT),undefined)
# Use TFM_LINKER_SCRIPT variable to specify custom linker script 
LINKER_SCRIPT=$(TFM_LINKER_SCRIPT)
else   # TFM_LINKER_SCRIPT

# Use linker script provided by TF-M for non-secure application by default
ifeq ($(TOOLCHAIN),ARM)
LINKER_SCRIPT_SRC?=$(TFM_S_APP_INSTALL_PATH)/startup/armclang/psoc6_ns.sct
else ifeq ($(TOOLCHAIN),GCC_ARM)
LINKER_SCRIPT_SRC?=$(TFM_S_APP_INSTALL_PATH)/startup/gcc/psoc6_ns.ld
else ifeq ($(TOOLCHAIN),IAR)
LINKER_SCRIPT_SRC?=$(TFM_S_APP_INSTALL_PATH)/startup/iar/psoc6_ns.icf
else
$(error "TF-M supports only GCC, ARMClang and IAR toolchains.")
endif   # $(TOOLCHAIN)

# Path to parsed linker script
LINKER_SCRIPT_PARSED=$(TFM_BUILD_DIR)/startup/$(notdir $(LINKER_SCRIPT_SRC))

ifneq ($(CY_SECONDSTAGE),true)
# First stage :
# Generate linker script $(LINKER_SCRIPT_PARSED) by parsing $(LINKER_SCRIPT_SRC)
LINKER_SCRIPT=$(LINKER_SCRIPT_SRC)

build: $(LINKER_SCRIPT_PARSED)

# Recipe to generate linker script 
$(LINKER_SCRIPT_PARSED): $(LINKER_SCRIPT_SRC) $(LINKER_SCRIPT_PARSED).d $(TFM_NS_DEFS_PATH)
	@echo "Generating $(LINKER_SCRIPT_PARSED)"
	mkdir -p $(dir $@) && \
	$(call TFM_PREPROCESSOR,$@,$<,$(addprefix -D,$(DEFINES)) -I$(TFM_S_APP_INSTALL_PATH)/memory_layout) && \
	[[ -f $(LINKER_SCRIPT_PARSED) ]] && touch $(LINKER_SCRIPT_PARSED)

# Dependencies for linker script
$(LINKER_SCRIPT_PARSED).d:
-include $(wildcard $(LINKER_SCRIPT_PARSED).d)

else   # $(CY_SECONDSTAGE)
# Second stage :
# Build image using linker script $(LINKER_SCRIPT_PARSED) parsed by preprocessor
LINKER_SCRIPT=$(LINKER_SCRIPT_PARSED)
endif   # $(CY_SECONDSTAGE)
endif   # TFM_LINKER_SCRIPT
